#pragma once
#include <Arduino.h>
#include <Wire.h>
#include "ESP8266TrueRandom.h"

class w7a8n1y4a_oled_128_64{
    public:
        uint8_t nice_game_52_64[512] = {
            0x00, 0xFE, 0xFE, 0x38, 0x70, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xE6, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFC, 0x0C, 0x06, 0x06,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x06, 0x06, 0x06, 0x06,
            0x06, 0x06, 0x06, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0E, 0x1C, 0x38,
            0x70, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
            0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x1F, 0x9F, 0x80, 0xC0, 0xC0, 0xC0, 0xC0,
            0xC0, 0xC0, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x1F, 0x1F, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x0F, 0xCC, 0xD8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0xC0, 0xC0,
            0x00, 0x00, 0xDF, 0xDF, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x00, 0x00, 0xFE, 0xFF, 0x01,
            0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7F, 0x0F,
            0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x1E, 0x78, 0xE0, 0x80, 0xE0,
            0x78, 0x1E, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8,
            0x7F, 0x1F, 0x18, 0x18, 0x18, 0x1F, 0x7F, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
            0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF1, 0x39, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x18, 0x38,
            0x70, 0xE0, 0xC3, 0x03, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18, 0x1B, 0x1B, 0x18, 0x18, 0x18,
            0x18, 0x33, 0x73, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xF3, 0x30, 0x18, 0x1B, 0x1B,
            0x1B, 0x1B, 0x1B, 0x1B, 0x33, 0xF3, 0xC3, 0x00, 0x00, 0xFF, 0xFF, 0x3C, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x1C, 0x3E, 0xF7, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x60, 0x60,
            0x60, 0x60, 0x60, 0xE0, 0xE0, 0x30, 0x38, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x1F, 0x3F, 0x70,
            0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x70, 0x38, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00,
            0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0E, 0x7C, 0x70, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0F, 0x3F, 0x30, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0x3F, 0x0F, 0x00
        };
        uint8_t milos_64_64[512] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x90, 0x00, 0x10, 0x24, 0xA0, 0x02, 0x88,
            0x90, 0x36, 0x06, 0xAA, 0x04, 0x12, 0x40, 0x1C, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x87, 0xFF, 0xFF, 0xFE, 0x87, 0x06, 0x16, 0xB4, 0xB4, 0xFC, 0xFC, 0xFC, 0xF9,
            0xF1, 0xC0, 0x90, 0x02, 0x88, 0x39, 0x12, 0x40, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x3E, 0x7C, 0xFC, 0xFE, 0xFF, 0x87, 0xE7, 0xFC, 0xFC,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x1C, 0x9E, 0xBF, 0xB7, 0xBF, 0xFF, 0xFF, 0xBF, 0xBF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFC, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x00, 0xF8, 0xF8, 0xF9, 0x73, 0x07, 0x03, 0x01, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x03, 0x1B, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x01, 0xE0,
            0xF0, 0xFC, 0xFF, 0x8F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF8, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x20, 0x30, 0x30, 0x30, 0x38, 0xB8, 0xB8, 0xB8, 0xF0, 0xFC, 0xFC, 0xFC, 0xF8, 0xC4, 0x83,
            0x83, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xC6, 0x03, 0x00, 0x00, 0x80,
            0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x80,
            0xE0, 0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xCF,
            0x9F, 0x1F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
            0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x1F, 0x1E, 0x7F,
            0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
            0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        uint8_t  max_64_64[512] = {
            0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x47, 0x77, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x1F, 0xBF,
            0xFB, 0x7F, 0x06, 0x06, 0x06, 0x07, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
            0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1C, 0x0C, 0x0C, 0x1C, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xFB, 0xE8, 0xE0, 0x60, 0xF6, 0xFE, 0xE6, 0xE7,
            0x1F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xE0,
            0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE6, 0xE7, 0xEF, 0xFF, 0xFE, 0xFE, 0xF7, 0xE1, 0xE1, 0xE0,
            0xE0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0x0F, 0x83,
            0xF1, 0xE5, 0xCD, 0x99, 0x39, 0xBD, 0x9D, 0xCD, 0xA0, 0xB8, 0x99, 0x83, 0xC3, 0xC7, 0x87, 0x87,
            0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0x78, 0x38, 0x38, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x0F, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFE, 0xF9, 0xC3, 0x07, 0x07, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7,
            0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF7, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
            0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xC0, 0xFF, 0xFF, 0x8F, 0x8F, 0x0F, 0x83, 0x83, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xCF, 0xCF, 0xE7, 0xE7, 0xE3, 0xE1, 0xE7, 0xEF, 0xE7, 0xE7, 0xF7, 0xF3, 0xF1,
            0xF1, 0xF3, 0xF3, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00
        };
        w7a8n1y4a_oled_128_64(int adress = 0x3C);

        void oled_command(int command);
        void oled_data(int data);

        void oled_buffer_data();
        void oled_clear();
        void oled_clear_buffer();

        void draw_byte(uint16_t x, uint16_t y, uint8_t byte);
        void draw_pixel(uint16_t x, uint16_t y);

        uint16_t oled_char(uint16_t number, uint16_t length, uint16_t length_string);
        void draw_string(uint16_t x, uint16_t y, String arr);
        void oled_bitmap(uint16_t x, uint16_t y, uint16_t x_size, uint16_t y_size, uint8_t array[]);

        void set_oled_buffer(uint16_t i, uint8_t data){
            oled_buffer[i] = data;
        }
        uint8_t get_oled_buffer(uint16_t i){
            return oled_buffer[i]; 
        }
    private:  
        int adress_oled = 0x3C;
        uint8_t oled_buffer[1024] = {};
        uint8_t string_buffer[128] = {};
        uint8_t schrift_buffer[256] = {
            0xFC, 0x12, 0x12, 0xFC, 
            0xFE, 0x92, 0x92, 0x6C,
            0x7C, 0x82, 0x82, 0x44, 
            0xFE, 0x82, 0x82, 0x7C, 

            0xFE, 0x92, 0x82, 
            0xFE, 0x12, 0x02, 
            0x7C, 0x82, 0x92, 0x64, 
            0xFE, 0x10, 0x10, 0xFE, 

            0xFA, 
            0x60, 0x80, 0x7A, 
            0xFE, 0x10, 0x10, 0xEE, 
            0xFE, 0x80, 0x80, 

            0xFE, 0x04, 0x08, 0x04, 0xFE,
            0xFE, 0x04, 0x08, 0xFE,
            0x7C, 0x82, 0x82, 0x7C, 
            0xFE, 0x12, 0x12, 0x0C, 

            0x3C, 0x42, 0x42, 0xFC, 
            0xFE, 0x12, 0x32, 0xCC, 
            0x4C, 0x92, 0x92, 0x64, 
            0x08, 0x7E, 0x88, 

            0x7E, 0x80, 0x80, 0xFE, 
            0x0E, 0x30, 0xC0, 0x30, 0x0E, 
            0xFE, 0x40, 0x20, 0x40, 0xFE, 
            0xEE, 0x10, 0x10, 0xEE, 

            0x9E, 0xA0, 0xA0, 0x7E, 
            0xC6, 0xA2, 0x92, 0xCE, // z

            0x82, 0xFE, 0x80, //1
            0x8C, 0xC2, 0xA2, 0x9C, 

            0x44, 0x82, 0x92, 0x6C, 
            0x30, 0x28, 0x24, 0xFE, 0x20, 
            0x4E, 0x8A, 0x8A, 0x72, 
            0x7C, 0x92, 0x92, 0x60, 

            0x02, 0xF2, 0x0A, 0x06,
            0x6C, 0x92, 0x92, 0x6C, 
            0x0C, 0x92, 0x92, 0x7C, 
            0x7C, 0x82, 0x82, 0x7C, //0

            0x80, 
            0x80, 0x60, 
            0xBE, 
            0x0C, 0x02, 0xA2, 0x12, 0x0C,

            0x7C, 0x82,
            0x82, 0x7C, 
            0x04, 0x0A, 0x04, 
            0x84,

            0x80, 0x64,  
        };
};
class w7a8n1y4a_game : public w7a8n1y4a_oled_128_64{
    public:
        w7a8n1y4a_game() : w7a8n1y4a_oled_128_64(0x3C){};
        
        void game_start_buffer();
        void game_buffer_data();
        void game_frame();
        void game_reload_attack();
        void game_nice();
        void game_over();

        void game_attack_h(uint8_t position);
        void game_attack_l(uint8_t position);
        void game_attack_r(uint8_t position);
        void game_attack_u(uint8_t position);
        void game_attack_tick();
        
        void set_game_buffer(uint8_t number,uint8_t state){
            game_buffer[number] = state;
        }
        uint8_t get_game_buffer(uint8_t number){
            return game_buffer[number];
        }
        uint8_t game_buffer[128] = {
            3,0,0,1, 0,0,1,0, 0,1,0,3, 0,3,1,11,
            3,0,3,3, 3,2,3,3, 3,2,3,3, 0,3,1,1,

            1,0,3,1, 0,0,0,3, 0,0,1,3, 0,3,3,3,
            0,3,3,0, 3,0,3,0, 1,2,0,3, 1,0,0,5,

            6,0,0,1, 3,0,2,1, 0,3,0,3, 0,3,3,0,
            3,3,3,0, 3,1,0,0, 3,0,0,0, 1,3,0,1,

            1,1,3,0, 3,3,2,3, 3,3,2,3, 3,3,0,3,
            10,1,3,0, 3,0,1,0, 0,1,0,0, 1,0,0,3
        };
    private:
        unsigned long long millis_frame = 0;
        unsigned long long millis_reload_attack = 0;
        unsigned long long time_out_frame = 300;
        unsigned long long time_out_reload_attack = 400;
        uint8_t tank_h[8] = {
            0xFE, 0x30, 0x78, 0x7F, 0x7F, 0x78, 0x30, 0xFE
        };
        uint8_t tank_u[8] = {
            0x7F, 0x0C, 0x1E, 0xFE, 0xFE, 0x1E, 0x0C, 0x7F
        };
        uint8_t tank_l[8] = {
            0x18, 0x99, 0x99, 0xBD, 0xFF, 0xFF, 0xBD, 0x81
        };
        uint8_t tank_r[8] = {
            0x81, 0xBD, 0xFF, 0xFF, 0xBD, 0x99, 0x99, 0x18
        };
        uint8_t zerstoerung_0[8] = {
            0xFF, 0xBB, 0xDD, 0xFF, 0xFF, 0xBB, 0xDD, 0xFF
        };
        uint8_t zerstoerung_1[8] = {
            0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA
        };
        uint8_t zerstoerung_2[8] = {
            0x89, 0x54, 0x22, 0x89, 0x54, 0x22, 0x89, 0x54
        };
        uint8_t geschoss_hor[8] = {
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18,0x18, 0x18
        };
        uint8_t geschoss_zen[8] = {
            0x00, 0x00, 0x00, 0x18, 0x18, 0x00,0x00, 0x00
        };
        uint8_t geschoss_ver[8] = {
            0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
        };
        uint8_t clear_8_8[8] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        uint8_t flag_8_8[8] = {
            0x00, 0x00, 0xFE, 0x3E, 0x1C, 0x08, 0x00, 0x00, 
        };
};
class w7a8n1y4a_bot : public w7a8n1y4a_game{
    public:
        w7a8n1y4a_bot() : w7a8n1y4a_game(){};

        void bot_tick();
        void bot_reload_tick();

        void bot_reload_state();

        void bot_left();
        void bot_right();
        void bot_heran();
        void bot_attack();

        void set_bot_position(uint8_t position){
            if(position >= 0 || position <= 127){
               bot_position = position;
            }
            bot_reload_state();
        }
        void set_bot_state(uint8_t state){
            if(state >= 4 || state <= 7){
               bot_state = state;
            }
            bot_reload_state();
        }
        uint8_t get_bot_state(){ return bot_state;}
        uint8_t get_bot_position(){ return bot_position;}
    private:
        unsigned long long millis_reload_bot = 0;
        unsigned long long time_out_reload_bot = 400;
        uint8_t bot_state = 6;
        uint8_t bot_position = 64;
};
class w7a8n1y4a_gamer : public w7a8n1y4a_bot{
    public:
        w7a8n1y4a_gamer() : w7a8n1y4a_bot(){};

        void gamer_reload_state();

        void gamer_left();
        void gamer_right();
        void gamer_heran();
        void gamer_attack();

        void set_gamer_position(uint8_t position){
            if(position >= 0 || position <= 127){
                main_position = position;
            }
            gamer_reload_state();
        }
        void set_gamer_state(uint8_t state){
            if(state >= 4 || state <= 7){
               main_state = state;
            }
            gamer_reload_state();
        }
        uint8_t get_gamer_state(){ return main_state;}
        uint8_t get_gamer_position(){ return main_position;}
    private:
        uint8_t main_state = 5;
        uint8_t main_position = 63;
};
